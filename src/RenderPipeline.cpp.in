#include <array>
#include <type_traits>

#include <openge/Camera.hpp>
#include <openge/GLShader.hpp>
#include <openge/GLShaderProgram.hpp>
#include <openge/GameObject.hpp>
#include <openge/RenderPipeline.hpp>
#include <openge/Transform.hpp>

namespace {

constexpr auto NUM_BUILTIN_SHADERS = 2;

constexpr std::array<const char *, NUM_BUILTIN_SHADERS> VERTEX_SHADERS {
    R"-(${STANDARD_VERT})-",
    R"-(${SKYBOX_VERT})-",
};

constexpr std::array<const char *, NUM_BUILTIN_SHADERS> FRAGMENT_SHADERS {
    R"-(${STANDARD_FRAG})-",
    R"-(${SKYBOX_FRAG})-",
};

std::vector<std::shared_ptr<ge::GLShaderProgram>>
    shaderPrograms(NUM_BUILTIN_SHADERS, nullptr);

}  // namespace

namespace ge::RenderPipeline {

namespace Attribute {
    const char *POSITION = "aPosition";
    const char *NORMAL = "aNormal";
    const char *TEXTURE_COORDINATE = "aTextureCoordinate";
}  // namespace Attribute

namespace Uniform {
    const char *MODEL = "model";
    const char *VIEW = "view";
    const char *PROJECTION = "projection";
    const char *NORMAL = "normal";

    const char *VIEW_POSITION = "viewPosition";

    const char *SKYBOX_TEXTURE = "skybox";
    const int SKYBOX_TEXTURE_UNIT = 0;

    namespace Material {
        const char *DIFFUSE_TEXTURE = "material.diffuse";
        const int DIFFUSE_TEXTURE_UNIT = 0;

        const char *SPECULAR_TEXTURE = "material.specular";
        const int SPECULAR_TEXTURE_UNIT = 1;

        const char *SHINE = "material.shine";

        const char *COLOR = "material.color";
    }  // namespace Material

    namespace Light {
        const char *AMBIENT = "ambient";
    }  // namespace Light

    namespace DirectionalLight {
        const char *COUNT = "numDirectionalLights";

        const std::vector<const char *> DIRECTION {
            "directionalLights[0].direction",
            "directionalLights[1].direction",
            "directionalLights[2].direction",
            "directionalLights[3].direction",
            "directionalLights[4].direction",
            "directionalLights[5].direction",
            "directionalLights[6].direction",
            "directionalLights[7].direction",
            "directionalLights[8].direction",
            "directionalLights[9].direction",
        };

        const std::vector<const char *> COLOR {
            "directionalLights[0].color",
            "directionalLights[1].color",
            "directionalLights[2].color",
            "directionalLights[3].color",
            "directionalLights[4].color",
            "directionalLights[5].color",
            "directionalLights[6].color",
            "directionalLights[7].color",
            "directionalLights[8].color",
            "directionalLights[9].color",
        };
    }  // namespace DirectionalLight
}  // namespace Uniform

void destroy() {
    shaderPrograms.assign(shaderPrograms.size(), nullptr);
}

std::shared_ptr<GLShaderProgram> getShaderProgram(Program program) {
    const auto index =
        static_cast<std::underlying_type_t<Program>>(program);

    auto &shaderProgram = shaderPrograms[index];
    if (shaderProgram == nullptr) {
        shaderProgram = std::make_shared<GLShaderProgram>();
        shaderProgram->create();

        shaderProgram->addShaderFromSourceCode(
            GLShader::ShaderTypeBit::Vertex,
            VERTEX_SHADERS[index]);

        shaderProgram->addShaderFromSourceCode(
            GLShader::ShaderTypeBit::Fragment,
            FRAGMENT_SHADERS[index]);

        shaderProgram->link();
    }

    return shaderProgram;
}

void uploadCamera(GameObject *camera) {
    for (auto &shaderProgram : shaderPrograms) {
        if (shaderProgram != nullptr) {
            const auto transform = camera->getComponent<Transform>();

            shaderProgram->bind();

            shaderProgram->setUniformValue(Uniform::PROJECTION,
                                           camera->getComponent<Camera>()
                                                 ->getProjectionMatrix());

            shaderProgram->setUniformValue(Uniform::VIEW,
                                           transform->getWorldToLocalMatrix());

            shaderProgram->setUniformValue(Uniform::VIEW_POSITION,
                                           transform->getPosition());
        }
    }
}

}  // namespace ge::RenderPipeline
