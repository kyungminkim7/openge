#version ${GLSL_VERSION}

${GLSL_PRECISION}

struct Material {
    sampler2D diffuse;
    sampler2D specular;
    float shine;

    vec4 color;
};

struct DirectionalLight {
    vec3 direction;
    vec3 color;
};

in vec3 vPosition;
in vec3 vNormal;
in vec2 vTextureCoordinate;

uniform vec3 viewPosition;

uniform float ambient;

#define MAX_DIRECTIONAL_LIGHTS 10
uniform int numDirectionalLights;
uniform DirectionalLight directionalLights[MAX_DIRECTIONAL_LIGHTS];

uniform Material material;

out vec4 fragColor;

vec3 getTexel(sampler2D sampler) {
    return vec3(texture(sampler, vTextureCoordinate));
}

vec3 calculateDirectionalLight(DirectionalLight light) {
    vec3 diffuseMaterialTexel = getTexel(material.diffuse);

    // Ambient light
    vec3 ambientLight = ambient * light.color * diffuseMaterialTexel;

    // Diffuse light
    float lightAngle = max(dot(vNormal, -light.direction), 0.0f);
    vec3 diffuseLight = light.color * lightAngle * diffuseMaterialTexel;

    // Specular light
    vec3 viewDirection = normalize(viewPosition - vPosition);
    vec3 reflectDirection = reflect(light.direction, vNormal);
    float specularAngle = dot(viewDirection, reflectDirection);
    float spec = pow(max(specularAngle, 0.0f), material.shine);
    vec3 specularLight = light.color * spec * getTexel(material.specular);

    return ambientLight + diffuseLight + specularLight;
}

void main() {
    vec3 result = vec3(0.0);

    for (int i = 0; i < numDirectionalLights; ++i) {
        result += calculateDirectionalLight(directionalLights[i]);
    }

    fragColor = vec4(result, 1.0f) * material.color;
}
